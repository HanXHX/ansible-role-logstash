---

- name: SET_FACT | Is docker?
  set_fact:
    logstash_is_docker: "{{ false if ansible_virtualization_type is not defined or ansible_virtualization_type != 'docker' else true }}"

- name: SHELL | Get java version
  shell: java -version 2>&1 | awk -F '"' '/version/ { print $2 }'
  register: java_version
  changed_when: false

- name: FAIL | Fail if java < 8.0
  fail: msg="Java version ({{ java_version.stdout | default('not installed?', true) }}) is outdated"
  when:
    java_version.stdout | length == 0 or
    java_version.stdout | version_compare('1.8', 'lt')

- name: APT_KEY | Add Elasticsearch apt key
  apt_key:
    url: '{{ logstash_apt_key }}'
    state: present

- name: APT | Install needed packages
  apt: pkg={{ item }}
  with_items:
    - apt-transport-https
    - haveged

- name: Add Logstash repository.
  apt_repository:
    repo: '{{ logstash_apt_repository }}'
    state: present

- name: APT | Update
  apt: update_cache=yes update_cache=yes cache_valid_time=3600
  changed_when: false

- name: APT | Install Logstash
  apt: pkg=logstash state=present
  register: i

- block:

  - name: SERVICE | Stop logstash
    service: name=logstash state=stopped

  - name: LINEINFILE | Configure JVM
    lineinfile: >
      dest="/etc/logstash/jvm.options"
      regexp="^#?-{{ item.key }}"
      line="-{{ item.key }}{{ item.value | default('') }}"
    with_dict: "{{ logstash_jvm }}"

  - name: SERVICE | Stop logstash
    service: name=logstash state=started

  when: i.changed

- name: USER | Add Logstash user to adm group
  user:
    name: logstash
    group: logstash
    groups: adm
  notify: restart logstash
